version: 2.1

jobs:

  test:
    working_directory: ~/project/api
    docker:
      - image: circleci/python:{{ cookiecutter.python_version }}
        auth:
          username: $DOCKERHUB_USER
          password: $DOCKERHUB_PASS
        environment:
          {{ cookiecutter.env_prefix }}EMAIL_BACKEND: django.core.mail.backends.dummy.EmailBackend
          {{ cookiecutter.env_prefix }}SECRET_KEY: stub
          {{ cookiecutter.env_prefix }}USE_SENTRY: off
          {{ cookiecutter.env_prefix }}DEBUG: off
          {{ cookiecutter.env_prefix }}DATABASE_URL: postgresql://postgres:test_db_password@localhost/{{ cookiecutter.project_slug }}_test_db
          {{ cookiecutter.env_prefix }}CELERY_BROKER: redis://localhost:6379/1
          {{ cookiecutter.env_prefix }}CELERY_TASK_ALWAYS_EAGER: on
      - image: postgres:{{ cookiecutter.postgresql_version }}
        auth:
          username: $DOCKERHUB_USER
          password: $DOCKERHUB_PASS
        environment:
          POSTGRES_DB: {{ cookiecutter.project_slug }}_test_db
          POSTGRES_PASSWORD: test_db_password
      - image: redis:{{ cookiecutter.redis_version }}
        auth:
          username: $DOCKERHUB_USER
          password: $DOCKERHUB_PASS
    steps:
      - checkout
      - restore_cache:
          key: &python-deps-cache {% raw %}python-deps-{{ checksum "requirements-dev.txt" }}{% endraw %}
      - run:
          name: Install Python dependencies
          command: |
            python3 -m venv .env
            . .env/bin/activate
            pip install -U pip pip-tools
            make pip-sync-dev
      - save_cache:
          key: *python-deps-cache
          paths:
            - ".env"
      - run:
          name: Check `black`
          command: make black-check
      - run:
          name: Check `isort`
          command: make isort-check
      - run:
          name: Check `pylama`
          command: make pylama-check
      - run:
          name: Check `bandit`
          command: make bandit-check
      - run:
          name: Check `safety`
          command: make safety-check
      - run:
          name: Wait for Redis
          command: dockerize -wait tcp://localhost:6379 -timeout 1m
      - run:
          name: Wait for Postgres
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Check for uncreated migrations
          command: make migrations-check
      - run:
          name: Run tests
          command: |
            python manage.py collectstatic --no-input
            pytest
      - store_test_results:
          path: ~/project/api/test-results

workflows:
  version: 2
  test_and_deploy:
    jobs:
      - test
