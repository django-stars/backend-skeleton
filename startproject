#!/bin/bash

DIALOG=$(which dialog)

COLOR_ERROR='\033[1;91m'
COLOR_LABEL='\033[1;33m'
COLOR_SUBLABEL='\033[0;33m'
COLOR_NC='\033[0m'

HOST="https://be.skeletons.djangostars.com/"

DJANGO_VERSION="2.1"
DOC_VERSION="2.1"


if [[ $DIALOG = "" ]]; then
    echo -e "${COLOR_ERROR}dialog not found, please install into your system and run this script again."
    echo -e "${COLOR_LABEL}MacOS:\n\t${COLOR_SUBLABEL}brew install dialog"
    echo -e "${COLOR_LABEL}Ubuntu Linux:\n\t${COLOR_SUBLABEL}apt install dialog"
    echo -e "${COLOR_LABEL}Arch Linux:\n\t${COLOR_SUBLABEL}pacman -S dialog${COLOR_NC}"

    exit
fi

DIALOG_TITLE="Django Stars BE Skeleton"


function dlg_python_version () {
    local VERSION_OPTIONS=("3.7" "3.7.x"
                     "3.6" "3.6.x"
                     "2.7" "2.7.x")
    local VERSION_CHOICE
    VERSION_CHOICE=$(dialog --clear \
                            --title "${DIALOG_TITLE}" \
                            --menu "Which python version do you need?" \
                            15 40 4 "${VERSION_OPTIONS[@]}" \
                            2>&1 > /dev/tty)

    echo ${VERSION_CHOICE}
}

function dlg_project_name () {
    local NAME
    NAME=$(dialog --clear \
                        --title "${DIALOG_TITLE}" \
                        --inputbox "Project name" 15 40 "" \
                        2>&1 > /dev/tty)

    echo ${NAME}
}

function dlg_project_template () {
    local TMPL_OPTIONS=("django_drf_celery" "Django + DRF + Celery"
                  "django" "pure Django"
                  "django_drf" "Django + DRF"
                  "django_celery" "Django + Celery")
    local TMPL_CHOICE
    TMPL_CHOICE=$(dialog --clear \
                         --title "${DIALOG_TITLE}" \
                         --menu "What do you need for your project" \
                         15 60 4 "${TMPL_OPTIONS[@]}" \
                         2>&1 > /dev/tty)

    echo ${TMPL_CHOICE}
}


### Ask about future project ###################################################

# === ask Python version
PYVER=$( dlg_python_version )

# === ask project name
#NAME=$( dlg_project_name "hello" )
NAME_SETTED=1
while [[ $NAME_SETTED -ne 0 ]]; do
    NAME=$( dlg_project_name ${NAME} )
    NAME_SETTED=0
    if [ -n "$(python -c "${NAME} = 1" 2>&1)" ]; then
        dialog --clear \
               --title "Error" \
               --msgbox "project name should be a valid python variable" 10 60 \
               2>&1 > /dev/tty
        NAME_SETTED+=1
    fi
    if [ -z "$(python -c "import ${NAME}" 2>&1)" ]; then
        dialog --clear \
               --title "Error" \
               --msgbox "python already has module with same name" 10 60 \
               2>&1 > /dev/tty
        NAME_SETTED+=1
    fi
    if [ -a "${NAME}" ]; then
        dialog --clear \
               --title "Error" \
               --msgbox "directory with same name already exist" 10 60 \
               2>&1 > /dev/tty
        NAME_SETTED+=1
    fi
done

UPPER_NAME=$(echo "${NAME}" | tr a-z A-Z)

# === ask for template
TMPL=$( dlg_project_template )

### Get template and create project structure ##################################
echo -e ${COLOR_LABEL}------------------${COLOR_NC}
echo -e ver: ${PYVER} name: ${NAME}  template: ${TMPL}

TMP=$(mktemp -d)
curl ${HOST}djangostars_project_template__${TMPL}.tar.gz > ${TMP}/djangostars_project_template__${TMPL}.tar.gz
mkdir ${NAME}
cd ${NAME}
tar xzvf ${TMP}/djangostars_project_template__${TMPL}.tar.gz
rm -rf ${TMP}

### Replace variables in files with real values ################################
find . -type f | xargs sed -i "" -e "s/{{ project_name }}/${NAME}/g; s/{{ django_version }}/${DJANGO_VERSION}/g; s/{{ doc_version }}/${DOC_VERSION}/g; s/{{ project_upper_name }}/${UPPER_NAME}/g"
mv project_name/settings/project_name.py project_name/settings/${NAME}.py
mv project_name ${NAME}
sed -i "" "s/{{ python_version }}/${PYVER}/" Pipfile

clear

### Project information and environment ########################################

read -r -d '' MSG_FINISH << EOF
${NAME} - project sucessfully created

- python: ${PYVER}
- template: ${TMPL}

Avaialable make commands:
  * run (default) - start django project
  * test - run tests
  * celery - start celery with beat

Available features:
  * Django
  * django-extensions
  * pytest
  * ipython / ipdb
EOF

case ${TMPL} in
    django_drf_celery)
        printf -v MSG_FINISH "\n%s\n  * Django REST Framework\n  * Celery\n" "${MSG_FINISH}"
        ;;
    django_drf)
        printf -v MSG_FINISH "\n%s\n  * Django REST Framwwork" "${MSG_FINISH}"
        ;;
    django_celery)
        printf -v MSG_FINISH "\n%s\n  * Celery" "${MSG_FINISH}"
        ;;
esac

if [ -n $(command -v pipenv) ]; then
    pipenv --python ${PYVER} install --dev
    CONSOLE_MSG_FINISH=${MSG_FINISH}
else
    printf -v CONSOLE_MSG_FINISH "%s\n\n>>>> ATTENTION <<<<\nrun ${COLOR_ERROR}pipenv install --dev${COLOR_NC} to create virtualenv and install needed packages" "${MSG_FINISH}"
    printf -v MSG_FINISH "%s\n\n>>>> ATTENTION <<<<\nrun 'pipenv install --dev' to create virtualenv and install needed packages" "${MSG_FINISH}"
fi

dialog --clear \
       --title "${DIALOG_TITLE}" \
       --msgbox "${MSG_FINISH}" 30 70 \
       2>&1 > /dev/tty

clear

echo -e "${CONSOLE_MSG_FINISH}"
